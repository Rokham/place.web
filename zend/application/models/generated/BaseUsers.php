<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Users', 'main');

/**
 * BaseUsers
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $run_id
 * @property integer $author_id
 * @property timestamp $date_modified
 * @property timestamp $date_created
 * @property string $username
 * @property enum $user_type
 * @property Runs $Runs
 * @property Doctrine_Collection $Activities
 * @property Doctrine_Collection $Activities_4
 * @property Doctrine_Collection $ActivityTypes
 * @property Doctrine_Collection $AnswerConcept
 * @property Doctrine_Collection $Answers
 * @property Doctrine_Collection $Assessable
 * @property Doctrine_Collection $AssessmentReviews
 * @property Doctrine_Collection $Assessments
 * @property Doctrine_Collection $Commentable
 * @property Doctrine_Collection $Comments
 * @property Doctrine_Collection $Concepts
 * @property Doctrine_Collection $EloTemplate
 * @property Doctrine_Collection $ExampleConcept
 * @property Doctrine_Collection $Examples
 * @property Doctrine_Collection $Questions
 * @property Doctrine_Collection $ResolvedUserAlerts
 * @property Doctrine_Collection $Votable
 * @property Doctrine_Collection $Votes
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseUsers extends Doctrine_Record
{
    public function setTableDefinition()
    {
        $this->setTableName('users');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'fixed' => false,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             ));
        $this->hasColumn('run_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('author_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('date_modified', 'timestamp', null, array(
             'type' => 'timestamp',
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('date_created', 'timestamp', null, array(
             'type' => 'timestamp',
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('username', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('user_type', 'enum', 7, array(
             'type' => 'enum',
             'length' => 7,
             'fixed' => false,
             'unsigned' => false,
             'values' => 
             array(
              0 => 'STUDENT',
              1 => 'TEACHER',
              2 => 'ADMIN',
             ),
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Runs', array(
             'local' => 'run_id',
             'foreign' => 'id'));

        $this->hasMany('Activities', array(
             'local' => 'id',
             'foreign' => 'activity_on_user'));

        $this->hasMany('Activities as Activities_4', array(
             'local' => 'id',
             'foreign' => 'author_id'));

        $this->hasMany('ActivityTypes', array(
             'local' => 'id',
             'foreign' => 'author_id'));

        $this->hasMany('AnswerConcept', array(
             'local' => 'id',
             'foreign' => 'author_id'));

        $this->hasMany('Answers', array(
             'local' => 'id',
             'foreign' => 'author_id'));

        $this->hasMany('Assessable', array(
             'local' => 'id',
             'foreign' => 'author_id'));

        $this->hasMany('AssessmentReviews', array(
             'local' => 'id',
             'foreign' => 'author_id'));

        $this->hasMany('Assessments', array(
             'local' => 'id',
             'foreign' => 'author_id'));

        $this->hasMany('Commentable', array(
             'local' => 'id',
             'foreign' => 'author_id'));

        $this->hasMany('Comments', array(
             'local' => 'id',
             'foreign' => 'author_id'));

        $this->hasMany('Concepts', array(
             'local' => 'id',
             'foreign' => 'author_id'));

        $this->hasMany('EloTemplate', array(
             'local' => 'id',
             'foreign' => 'author_id'));

        $this->hasMany('ExampleConcept', array(
             'local' => 'id',
             'foreign' => 'author_id'));

        $this->hasMany('Examples', array(
             'local' => 'id',
             'foreign' => 'author_id'));

        $this->hasMany('Questions', array(
             'local' => 'id',
             'foreign' => 'author_id'));

        $this->hasMany('ResolvedUserAlerts', array(
             'local' => 'id',
             'foreign' => 'author_id'));

        $this->hasMany('Votable', array(
             'local' => 'id',
             'foreign' => 'author_id'));

        $this->hasMany('Votes', array(
             'local' => 'id',
             'foreign' => 'author_id'));
    }
}